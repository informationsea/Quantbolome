buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.ajoberstar:gradle-git:0.9.0"
    }
}

import org.ajoberstar.grgit.Grgit;

allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'


    group = 'jp.ac.tohoku.ecei.sb.metabolome.lims'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        compile 'org.slf4j:slf4j-api:1.7.12'
        compile 'org.slf4j:slf4j-simple:1.7.12'

        testCompile "junit:junit:4.11"
    }

    javadoc {
        options.locale = 'en_US'
    }
}

subprojects {
    task testAndReport(dependsOn: [test, jacocoTestReport]) << {}

    sourceSets {
        main {
            resources {
                srcDirs = ['src/main/resources', "$buildDir/version"]
            }
        }
    }

    def versionInfoFile = file("$buildDir/version/META-INF/metabolome-lims/version.properties")

    task createGitInfoFile {
        outputs.upToDateWhen {
            if (file(project.file('../.git')).isDirectory() && versionInfoFile.exists()) {
                def prop = new Properties()
                prop.load(new FileInputStream(versionInfoFile))
                def repo = Grgit.open(project.file('..'))
                return repo.head().id == prop.getProperty("git.commit")
            } else {
                return false
            }
        }


        doLast {
            println project.file('../.git')
            if (file(project.file('../.git')).isDirectory()) {
                def repo = Grgit.open(project.file('..'))
                versionInfoFile.parentFile.mkdirs()
                versionInfoFile.text = "git.commit=" + repo.head().id + "\nversion=" + version + "\nbuild.date=" + new Date().toString()
                println repo.head().id
            } else {
                versionInfoFile.text = "git.commit=UNKNOWN\nversion=" + version + "\nbuild.date=" + new Date().toString()
            }
        }
    }

    processResources.dependsOn.add(createGitInfoFile)
}